!(function (t, e) {
	'object' == typeof exports && 'undefined' != typeof module
		? e(exports)
		: 'function' == typeof define && define.amd
		? define(['exports'], e)
		: e(((t = t || self).window = t.window || {}));
})(this, function (t) {
	'use strict';
	function e(t, e) {
		if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
	}
	function i(t, e) {
		for (var i = 0; i < e.length; i++) {
			var r = e[i];
			(r.enumerable = r.enumerable || !1),
				(r.configurable = !0),
				'value' in r && (r.writable = !0),
				Object.defineProperty(t, r.key, r);
		}
	}
	function r(t, e, r) {
		return e && i(t.prototype, e), r && i(t, r), t;
	}
	function n(t, e, i) {
		return (
			e in t
				? Object.defineProperty(t, e, {
						value: i,
						enumerable: !0,
						configurable: !0,
						writable: !0,
				  })
				: (t[e] = i),
			t
		);
	}
	function a() {
		return (a =
			Object.assign ||
			function (t) {
				for (var e = 1; e < arguments.length; e++) {
					var i = arguments[e];
					for (var r in i) Object.prototype.hasOwnProperty.call(i, r) && (t[r] = i[r]);
				}
				return t;
			}).apply(this, arguments);
	}
	function s(t, e) {
		if ('function' != typeof e && null !== e)
			throw new TypeError('Super expression must either be null or a function');
		(t.prototype = Object.create(e && e.prototype, {
			constructor: { value: t, writable: !0, configurable: !0 },
		})),
			e && l(t, e);
	}
	function o(t) {
		return (o = Object.setPrototypeOf
			? Object.getPrototypeOf
			: function (t) {
					return t.__proto__ || Object.getPrototypeOf(t);
			  })(t);
	}
	function l(t, e) {
		return (l =
			Object.setPrototypeOf ||
			function (t, e) {
				return (t.__proto__ = e), t;
			})(t, e);
	}
	function h(t) {
		if (void 0 === t)
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		return t;
	}
	function c(t, e) {
		return !e || ('object' != typeof e && 'function' != typeof e) ? h(t) : e;
	}
	function f(t, e) {
		return (
			(function (t) {
				if (Array.isArray(t)) return t;
			})(t) ||
			(function (t, e) {
				if (
					!(
						Symbol.iterator in Object(t) ||
						'[object Arguments]' === Object.prototype.toString.call(t)
					)
				)
					return;
				var i = [],
					r = !0,
					n = !1,
					a = void 0;
				try {
					for (
						var s, o = t[Symbol.iterator]();
						!(r = (s = o.next()).done) && (i.push(s.value), !e || i.length !== e);
						r = !0
					);
				} catch (t) {
					(n = !0), (a = t);
				} finally {
					try {
						r || null == o.return || o.return();
					} finally {
						if (n) throw a;
					}
				}
				return i;
			})(t, e) ||
			(function () {
				throw new TypeError('Invalid attempt to destructure non-iterable instance');
			})()
		);
	}
	function u(t) {
		return (
			(function (t) {
				if (Array.isArray(t)) {
					for (var e = 0, i = new Array(t.length); e < t.length; e++) i[e] = t[e];
					return i;
				}
			})(t) ||
			(function (t) {
				if (
					Symbol.iterator in Object(t) ||
					'[object Arguments]' === Object.prototype.toString.call(t)
				)
					return Array.from(t);
			})(t) ||
			(function () {
				throw new TypeError('Invalid attempt to spread non-iterable instance');
			})()
		);
	}
	const d = Math.pow(2, -52),
		g = new Uint32Array(512);
	class p {
		static from(t, e = k, i = _) {
			const r = t.length,
				n = new Float64Array(2 * r);
			for (let a = 0; a < r; a++) {
				const r = t[a];
				(n[2 * a] = e(r)), (n[2 * a + 1] = i(r));
			}
			return new p(n);
		}
		constructor(t) {
			const e = t.length >> 1;
			if (e > 0 && 'number' != typeof t[0])
				throw new Error('Expected coords to contain numbers.');
			this.coords = t;
			const i = Math.max(2 * e - 5, 0);
			(this._triangles = new Uint32Array(3 * i)),
				(this._halfedges = new Int32Array(3 * i)),
				(this._hashSize = Math.ceil(Math.sqrt(e))),
				(this._hullPrev = new Uint32Array(e)),
				(this._hullNext = new Uint32Array(e)),
				(this._hullTri = new Uint32Array(e)),
				(this._hullHash = new Int32Array(this._hashSize).fill(-1)),
				(this._ids = new Uint32Array(e)),
				(this._dists = new Float64Array(e)),
				this.update();
		}
		update() {
			const { coords: t, _hullPrev: e, _hullNext: i, _hullTri: r, _hullHash: n } = this,
				a = t.length >> 1;
			let s = 1 / 0,
				o = 1 / 0,
				l = -1 / 0,
				h = -1 / 0;
			for (let e = 0; e < a; e++) {
				const i = t[2 * e],
					r = t[2 * e + 1];
				i < s && (s = i),
					r < o && (o = r),
					i > l && (l = i),
					r > h && (h = r),
					(this._ids[e] = e);
			}
			const c = (s + l) / 2,
				f = (o + h) / 2;
			let u,
				g,
				p,
				v = 1 / 0;
			for (let e = 0; e < a; e++) {
				const i = m(c, f, t[2 * e], t[2 * e + 1]);
				i < v && ((u = e), (v = i));
			}
			const b = t[2 * u],
				P = t[2 * u + 1];
			v = 1 / 0;
			for (let e = 0; e < a; e++) {
				if (e === u) continue;
				const i = m(b, P, t[2 * e], t[2 * e + 1]);
				i < v && i > 0 && ((g = e), (v = i));
			}
			let k = t[2 * g],
				_ = t[2 * g + 1],
				A = 1 / 0;
			for (let e = 0; e < a; e++) {
				if (e === u || e === g) continue;
				const i = w(b, P, k, _, t[2 * e], t[2 * e + 1]);
				i < A && ((p = e), (A = i));
			}
			let x = t[2 * p],
				O = t[2 * p + 1];
			if (A === 1 / 0) {
				for (let e = 0; e < a; e++) this._dists[e] = t[2 * e] - t[0] || t[2 * e + 1] - t[1];
				S(this._ids, this._dists, 0, a - 1);
				const e = new Uint32Array(a);
				let i = 0;
				for (let t = 0, r = -1 / 0; t < a; t++) {
					const n = this._ids[t];
					this._dists[n] > r && ((e[i++] = n), (r = this._dists[n]));
				}
				return (
					(this.hull = e.subarray(0, i)),
					(this.triangles = new Uint32Array(0)),
					void (this.halfedges = new Uint32Array(0))
				);
			}
			if (y(b, P, k, _, x, O)) {
				const t = g,
					e = k,
					i = _;
				(g = p), (k = x), (_ = O), (p = t), (x = e), (O = i);
			}
			const V = (function (t, e, i, r, n, a) {
				const s = i - t,
					o = r - e,
					l = n - t,
					h = a - e,
					c = s * s + o * o,
					f = l * l + h * h,
					u = 0.5 / (s * h - o * l);
				return { x: t + (h * c - o * f) * u, y: e + (s * f - l * c) * u };
			})(b, P, k, _, x, O);
			(this._cx = V.x), (this._cy = V.y);
			for (let e = 0; e < a; e++) this._dists[e] = m(t[2 * e], t[2 * e + 1], V.x, V.y);
			S(this._ids, this._dists, 0, a - 1), (this._hullStart = u);
			let R = 3;
			(i[u] = e[p] = g),
				(i[g] = e[u] = p),
				(i[p] = e[g] = u),
				(r[u] = 0),
				(r[g] = 1),
				(r[p] = 2),
				n.fill(-1),
				(n[this._hashKey(b, P)] = u),
				(n[this._hashKey(k, _)] = g),
				(n[this._hashKey(x, O)] = p),
				(this.trianglesLen = 0),
				this._addTriangle(u, g, p, -1, -1, -1);
			for (let a, s, o = 0; o < this._ids.length; o++) {
				const l = this._ids[o],
					h = t[2 * l],
					c = t[2 * l + 1];
				if (o > 0 && Math.abs(h - a) <= d && Math.abs(c - s) <= d) continue;
				if (((a = h), (s = c), l === u || l === g || l === p)) continue;
				let f = 0;
				for (
					let t = 0, e = this._hashKey(h, c);
					t < this._hashSize &&
					((f = n[(e + t) % this._hashSize]), -1 === f || f === i[f]);
					t++
				);
				f = e[f];
				let m,
					v = f;
				for (; (m = i[v]), !y(h, c, t[2 * v], t[2 * v + 1], t[2 * m], t[2 * m + 1]); )
					if (((v = m), v === f)) {
						v = -1;
						break;
					}
				if (-1 === v) continue;
				let b = this._addTriangle(v, l, i[v], -1, -1, r[v]);
				(r[l] = this._legalize(b + 2)), (r[v] = b), R++;
				let w = i[v];
				for (; (m = i[w]), y(h, c, t[2 * w], t[2 * w + 1], t[2 * m], t[2 * m + 1]); )
					(b = this._addTriangle(w, l, m, r[l], -1, r[w])),
						(r[l] = this._legalize(b + 2)),
						(i[w] = w),
						R--,
						(w = m);
				if (v === f)
					for (; (m = e[v]), y(h, c, t[2 * m], t[2 * m + 1], t[2 * v], t[2 * v + 1]); )
						(b = this._addTriangle(m, l, v, -1, r[v], r[m])),
							this._legalize(b + 2),
							(r[m] = b),
							(i[v] = v),
							R--,
							(v = m);
				(this._hullStart = e[l] = v),
					(i[v] = e[w] = l),
					(i[l] = w),
					(n[this._hashKey(h, c)] = l),
					(n[this._hashKey(t[2 * v], t[2 * v + 1])] = v);
			}
			this.hull = new Uint32Array(R);
			for (let t = 0, e = this._hullStart; t < R; t++) (this.hull[t] = e), (e = i[e]);
			(this.triangles = this._triangles.subarray(0, this.trianglesLen)),
				(this.halfedges = this._halfedges.subarray(0, this.trianglesLen));
		}
		_hashKey(t, e) {
			return (
				Math.floor(
					(function (t, e) {
						const i = t / (Math.abs(t) + Math.abs(e));
						return (e > 0 ? 3 - i : 1 + i) / 4;
					})(t - this._cx, e - this._cy) * this._hashSize,
				) % this._hashSize
			);
		}
		_legalize(t) {
			const { _triangles: e, _halfedges: i, coords: r } = this;
			let n = 0,
				a = 0;
			for (;;) {
				const s = i[t],
					o = t - (t % 3);
				if (((a = o + ((t + 2) % 3)), -1 === s)) {
					if (0 === n) break;
					t = g[--n];
					continue;
				}
				const l = s - (s % 3),
					h = o + ((t + 1) % 3),
					c = l + ((s + 2) % 3),
					f = e[a],
					u = e[t],
					d = e[h],
					p = e[c];
				if (
					b(
						r[2 * f],
						r[2 * f + 1],
						r[2 * u],
						r[2 * u + 1],
						r[2 * d],
						r[2 * d + 1],
						r[2 * p],
						r[2 * p + 1],
					)
				) {
					(e[t] = p), (e[s] = f);
					const r = i[c];
					if (-1 === r) {
						let e = this._hullStart;
						do {
							if (this._hullTri[e] === c) {
								this._hullTri[e] = t;
								break;
							}
							e = this._hullPrev[e];
						} while (e !== this._hullStart);
					}
					this._link(t, r), this._link(s, i[a]), this._link(a, c);
					const o = l + ((s + 1) % 3);
					n < g.length && (g[n++] = o);
				} else {
					if (0 === n) break;
					t = g[--n];
				}
			}
			return a;
		}
		_link(t, e) {
			(this._halfedges[t] = e), -1 !== e && (this._halfedges[e] = t);
		}
		_addTriangle(t, e, i, r, n, a) {
			const s = this.trianglesLen;
			return (
				(this._triangles[s] = t),
				(this._triangles[s + 1] = e),
				(this._triangles[s + 2] = i),
				this._link(s, r),
				this._link(s + 1, n),
				this._link(s + 2, a),
				(this.trianglesLen += 3),
				s
			);
		}
	}
	function m(t, e, i, r) {
		const n = t - i,
			a = e - r;
		return n * n + a * a;
	}
	function v(t, e, i, r, n, a) {
		const s = (r - e) * (n - t),
			o = (i - t) * (a - e);
		return Math.abs(s - o) >= 33306690738754716e-32 * Math.abs(s + o) ? s - o : 0;
	}
	function y(t, e, i, r, n, a) {
		return (v(n, a, t, e, i, r) || v(t, e, i, r, n, a) || v(i, r, n, a, t, e)) < 0;
	}
	function b(t, e, i, r, n, a, s, o) {
		const l = t - s,
			h = e - o,
			c = i - s,
			f = r - o,
			u = n - s,
			d = a - o,
			g = c * c + f * f,
			p = u * u + d * d;
		return l * (f * p - g * d) - h * (c * p - g * u) + (l * l + h * h) * (c * d - f * u) < 0;
	}
	function w(t, e, i, r, n, a) {
		const s = i - t,
			o = r - e,
			l = n - t,
			h = a - e,
			c = s * s + o * o,
			f = l * l + h * h,
			u = 0.5 / (s * h - o * l),
			d = (h * c - o * f) * u,
			g = (s * f - l * c) * u;
		return d * d + g * g;
	}
	function S(t, e, i, r) {
		if (r - i <= 20)
			for (let n = i + 1; n <= r; n++) {
				const r = t[n],
					a = e[r];
				let s = n - 1;
				for (; s >= i && e[t[s]] > a; ) t[s + 1] = t[s--];
				t[s + 1] = r;
			}
		else {
			let n = i + 1,
				a = r;
			P(t, (i + r) >> 1, n),
				e[t[i]] > e[t[r]] && P(t, i, r),
				e[t[n]] > e[t[r]] && P(t, n, r),
				e[t[i]] > e[t[n]] && P(t, i, n);
			const s = t[n],
				o = e[s];
			for (;;) {
				do {
					n++;
				} while (e[t[n]] < o);
				do {
					a--;
				} while (e[t[a]] > o);
				if (a < n) break;
				P(t, n, a);
			}
			(t[i + 1] = t[a]),
				(t[a] = s),
				r - n + 1 >= a - i
					? (S(t, e, n, r), S(t, e, i, a - 1))
					: (S(t, e, i, a - 1), S(t, e, n, r));
		}
	}
	function P(t, e, i) {
		const r = t[e];
		(t[e] = t[i]), (t[i] = r);
	}
	function k(t) {
		return t[0];
	}
	function _(t) {
		return t[1];
	}
	var A =
		'undefined' != typeof globalThis
			? globalThis
			: 'undefined' != typeof window
			? window
			: 'undefined' != typeof global
			? global
			: 'undefined' != typeof self
			? self
			: {};
	var x = (function (t, e) {
			return t((e = { exports: {} }), e.exports), e.exports;
		})(function (t, e) {
			var i;
			t.exports =
				(((i = function () {
					function t(t) {
						return n.appendChild(t.dom), t;
					}
					function e(t) {
						for (var e = 0; e < n.children.length; e++)
							n.children[e].style.display = e === t ? 'block' : 'none';
						r = t;
					}
					var r = 0,
						n = document.createElement('div');
					(n.style.cssText =
						'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000'),
						n.addEventListener(
							'click',
							function (t) {
								t.preventDefault(), e(++r % n.children.length);
							},
							!1,
						);
					var a = (performance || Date).now(),
						s = a,
						o = 0,
						l = t(new i.Panel('FPS', '#0ff', '#002')),
						h = t(new i.Panel('MS', '#0f0', '#020'));
					if (self.performance && self.performance.memory)
						var c = t(new i.Panel('MB', '#f08', '#201'));
					return (
						e(0),
						{
							REVISION: 16,
							dom: n,
							addPanel: t,
							showPanel: e,
							begin: function () {
								a = (performance || Date).now();
							},
							end: function () {
								o++;
								var t = (performance || Date).now();
								if (
									(h.update(t - a, 200),
									t > s + 1e3 &&
										(l.update((1e3 * o) / (t - s), 100), (s = t), (o = 0), c))
								) {
									var e = performance.memory;
									c.update(
										e.usedJSHeapSize / 1048576,
										e.jsHeapSizeLimit / 1048576,
									);
								}
								return t;
							},
							update: function () {
								a = this.end();
							},
							domElement: n,
							setMode: e,
						}
					);
				}).Panel = function (t, e, i) {
					var r = 1 / 0,
						n = 0,
						a = Math.round,
						s = a(window.devicePixelRatio || 1),
						o = 80 * s,
						l = 48 * s,
						h = 3 * s,
						c = 2 * s,
						f = 3 * s,
						u = 15 * s,
						d = 74 * s,
						g = 30 * s,
						p = document.createElement('canvas');
					(p.width = o), (p.height = l), (p.style.cssText = 'width:80px;height:48px');
					var m = p.getContext('2d');
					return (
						(m.font = 'bold ' + 9 * s + 'px Helvetica,Arial,sans-serif'),
						(m.textBaseline = 'top'),
						(m.fillStyle = i),
						m.fillRect(0, 0, o, l),
						(m.fillStyle = e),
						m.fillText(t, h, c),
						m.fillRect(f, u, d, g),
						(m.fillStyle = i),
						(m.globalAlpha = 0.9),
						m.fillRect(f, u, d, g),
						{
							dom: p,
							update: function (l, v) {
								(r = Math.min(r, l)),
									(n = Math.max(n, l)),
									(m.fillStyle = i),
									(m.globalAlpha = 1),
									m.fillRect(0, 0, o, u),
									(m.fillStyle = e),
									m.fillText(
										a(l) + ' ' + t + ' (' + a(r) + '-' + a(n) + ')',
										h,
										c,
									),
									m.drawImage(p, f + s, u, d - s, g, f, u, d - s, g),
									m.fillRect(f + d - s, u, s, g),
									(m.fillStyle = i),
									(m.globalAlpha = 0.9),
									m.fillRect(f + d - s, u, s, a((1 - l / v) * g));
							},
						}
					);
				}),
				i);
		}),
		O = {
			aliceblue: [240, 248, 255],
			antiquewhite: [250, 235, 215],
			aqua: [0, 255, 255],
			aquamarine: [127, 255, 212],
			azure: [240, 255, 255],
			beige: [245, 245, 220],
			bisque: [255, 228, 196],
			black: [0, 0, 0],
			blanchedalmond: [255, 235, 205],
			blue: [0, 0, 255],
			blueviolet: [138, 43, 226],
			brown: [165, 42, 42],
			burlywood: [222, 184, 135],
			cadetblue: [95, 158, 160],
			chartreuse: [127, 255, 0],
			chocolate: [210, 105, 30],
			coral: [255, 127, 80],
			cornflowerblue: [100, 149, 237],
			cornsilk: [255, 248, 220],
			crimson: [220, 20, 60],
			cyan: [0, 255, 255],
			darkblue: [0, 0, 139],
			darkcyan: [0, 139, 139],
			darkgoldenrod: [184, 134, 11],
			darkgray: [169, 169, 169],
			darkgreen: [0, 100, 0],
			darkgrey: [169, 169, 169],
			darkkhaki: [189, 183, 107],
			darkmagenta: [139, 0, 139],
			darkolivegreen: [85, 107, 47],
			darkorange: [255, 140, 0],
			darkorchid: [153, 50, 204],
			darkred: [139, 0, 0],
			darksalmon: [233, 150, 122],
			darkseagreen: [143, 188, 143],
			darkslateblue: [72, 61, 139],
			darkslategray: [47, 79, 79],
			darkslategrey: [47, 79, 79],
			darkturquoise: [0, 206, 209],
			darkviolet: [148, 0, 211],
			deeppink: [255, 20, 147],
			deepskyblue: [0, 191, 255],
			dimgray: [105, 105, 105],
			dimgrey: [105, 105, 105],
			dodgerblue: [30, 144, 255],
			firebrick: [178, 34, 34],
			floralwhite: [255, 250, 240],
			forestgreen: [34, 139, 34],
			fuchsia: [255, 0, 255],
			gainsboro: [220, 220, 220],
			ghostwhite: [248, 248, 255],
			gold: [255, 215, 0],
			goldenrod: [218, 165, 32],
			gray: [128, 128, 128],
			green: [0, 128, 0],
			greenyellow: [173, 255, 47],
			grey: [128, 128, 128],
			honeydew: [240, 255, 240],
			hotpink: [255, 105, 180],
			indianred: [205, 92, 92],
			indigo: [75, 0, 130],
			ivory: [255, 255, 240],
			khaki: [240, 230, 140],
			lavender: [230, 230, 250],
			lavenderblush: [255, 240, 245],
			lawngreen: [124, 252, 0],
			lemonchiffon: [255, 250, 205],
			lightblue: [173, 216, 230],
			lightcoral: [240, 128, 128],
			lightcyan: [224, 255, 255],
			lightgoldenrodyellow: [250, 250, 210],
			lightgray: [211, 211, 211],
			lightgreen: [144, 238, 144],
			lightgrey: [211, 211, 211],
			lightpink: [255, 182, 193],
			lightsalmon: [255, 160, 122],
			lightseagreen: [32, 178, 170],
			lightskyblue: [135, 206, 250],
			lightslategray: [119, 136, 153],
			lightslategrey: [119, 136, 153],
			lightsteelblue: [176, 196, 222],
			lightyellow: [255, 255, 224],
			lime: [0, 255, 0],
			limegreen: [50, 205, 50],
			linen: [250, 240, 230],
			magenta: [255, 0, 255],
			maroon: [128, 0, 0],
			mediumaquamarine: [102, 205, 170],
			mediumblue: [0, 0, 205],
			mediumorchid: [186, 85, 211],
			mediumpurple: [147, 112, 219],
			mediumseagreen: [60, 179, 113],
			mediumslateblue: [123, 104, 238],
			mediumspringgreen: [0, 250, 154],
			mediumturquoise: [72, 209, 204],
			mediumvioletred: [199, 21, 133],
			midnightblue: [25, 25, 112],
			mintcream: [245, 255, 250],
			mistyrose: [255, 228, 225],
			moccasin: [255, 228, 181],
			navajowhite: [255, 222, 173],
			navy: [0, 0, 128],
			oldlace: [253, 245, 230],
			olive: [128, 128, 0],
			olivedrab: [107, 142, 35],
			orange: [255, 165, 0],
			orangered: [255, 69, 0],
			orchid: [218, 112, 214],
			palegoldenrod: [238, 232, 170],
			palegreen: [152, 251, 152],
			paleturquoise: [175, 238, 238],
			palevioletred: [219, 112, 147],
			papayawhip: [255, 239, 213],
			peachpuff: [255, 218, 185],
			peru: [205, 133, 63],
			pink: [255, 192, 203],
			plum: [221, 160, 221],
			powderblue: [176, 224, 230],
			purple: [128, 0, 128],
			rebeccapurple: [102, 51, 153],
			red: [255, 0, 0],
			rosybrown: [188, 143, 143],
			royalblue: [65, 105, 225],
			saddlebrown: [139, 69, 19],
			salmon: [250, 128, 114],
			sandybrown: [244, 164, 96],
			seagreen: [46, 139, 87],
			seashell: [255, 245, 238],
			sienna: [160, 82, 45],
			silver: [192, 192, 192],
			skyblue: [135, 206, 235],
			slateblue: [106, 90, 205],
			slategray: [112, 128, 144],
			slategrey: [112, 128, 144],
			snow: [255, 250, 250],
			springgreen: [0, 255, 127],
			steelblue: [70, 130, 180],
			tan: [210, 180, 140],
			teal: [0, 128, 128],
			thistle: [216, 191, 216],
			tomato: [255, 99, 71],
			turquoise: [64, 224, 208],
			violet: [238, 130, 238],
			wheat: [245, 222, 179],
			white: [255, 255, 255],
			whitesmoke: [245, 245, 245],
			yellow: [255, 255, 0],
			yellowgreen: [154, 205, 50],
		},
		V = Object.prototype.toString,
		R = function () {
			for (var t = 0; t < arguments.length; t++)
				if (void 0 !== arguments[t]) return arguments[t];
		},
		z = function (t) {
			var e,
				i,
				r = [],
				n = 1;
			if ('string' == typeof t)
				if (O[t]) (r = O[t].slice()), (i = 'rgb');
				else if ('transparent' === t) (n = 0), (i = 'rgb'), (r = [0, 0, 0]);
				else if (/^#[A-Fa-f0-9]+$/.test(t)) {
					var a = (l = t.slice(1)).length;
					(n = 1),
						a <= 4
							? ((r = [
									parseInt(l[0] + l[0], 16),
									parseInt(l[1] + l[1], 16),
									parseInt(l[2] + l[2], 16),
							  ]),
							  4 === a && (n = parseInt(l[3] + l[3], 16) / 255))
							: ((r = [
									parseInt(l[0] + l[1], 16),
									parseInt(l[2] + l[3], 16),
									parseInt(l[4] + l[5], 16),
							  ]),
							  8 === a && (n = parseInt(l[6] + l[7], 16) / 255)),
						r[0] || (r[0] = 0),
						r[1] || (r[1] = 0),
						r[2] || (r[2] = 0),
						(i = 'rgb');
				} else if (
					(e =
						/^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\s*\(([^\)]*)\)/.exec(
							t,
						))
				) {
					var s = e[1],
						o = 'rgb' === s,
						l = s.replace(/a$/, '');
					i = l;
					a = 'cmyk' === l ? 4 : 'gray' === l ? 1 : 3;
					(r = e[2]
						.trim()
						.split(/\s*,\s*/)
						.map(function (t, e) {
							if (/%$/.test(t))
								return e === a
									? parseFloat(t) / 100
									: 'rgb' === l
									? (255 * parseFloat(t)) / 100
									: parseFloat(t);
							if ('h' === l[e]) {
								if (/deg$/.test(t)) return parseFloat(t);
								if (void 0 !== E[t]) return E[t];
							}
							return parseFloat(t);
						})),
						s === l && r.push(1),
						(n = o || void 0 === r[a] ? 1 : r[a]),
						(r = r.slice(0, a));
				} else
					t.length > 10 &&
						/[0-9](?:\s|\/)/.test(t) &&
						((r = t.match(/([0-9]+)/g).map(function (t) {
							return parseFloat(t);
						})),
						(i = t
							.match(/([a-z])/gi)
							.join('')
							.toLowerCase()));
			else if (isNaN(t))
				if (
					((c = t),
					'[object Object]' !== V.call(c) ||
						(null !== (f = Object.getPrototypeOf(c)) &&
							f !== Object.getPrototypeOf({})))
				)
					(Array.isArray(t) ||
						(A.ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(t))) &&
						((r = [t[0], t[1], t[2]]), (i = 'rgb'), (n = 4 === t.length ? t[3] : 1));
				else {
					var h = R(t.r, t.red, t.R, null);
					null !== h
						? ((i = 'rgb'), (r = [h, R(t.g, t.green, t.G), R(t.b, t.blue, t.B)]))
						: ((i = 'hsl'),
						  (r = [
								R(t.h, t.hue, t.H),
								R(t.s, t.saturation, t.S),
								R(t.l, t.lightness, t.L, t.b, t.brightness),
						  ])),
						(n = R(t.a, t.alpha, t.opacity, 1)),
						null != t.opacity && (n /= 100);
				}
			else (i = 'rgb'), (r = [t >>> 16, (65280 & t) >>> 8, 255 & t]);
			var c, f;
			return { space: i, values: r, alpha: n };
		},
		E = { red: 0, orange: 60, yellow: 120, green: 180, blue: 240, purple: 300 };
	var L = function (t) {
		var e,
			i,
			r,
			n,
			a,
			s = t[0] / 360,
			o = t[1] / 100,
			l = t[2] / 100;
		if (0 === o) return [(a = 255 * l), a, a];
		(e = 2 * l - (i = l < 0.5 ? l * (1 + o) : l + o - l * o)), (n = [0, 0, 0]);
		for (var h = 0; h < 3; h++)
			(r = s + (1 / 3) * -(h - 1)) < 0 ? r++ : r > 1 && r--,
				(a =
					6 * r < 1
						? e + 6 * (i - e) * r
						: 2 * r < 1
						? i
						: 3 * r < 2
						? e + (i - e) * (2 / 3 - r) * 6
						: e),
				(n[h] = 255 * a);
		return n;
	};
	var T = function (t, e, i) {
			return t * (1 - i) + e * i;
		},
		I = function (t, e, i) {
			return e < i ? (t < e ? e : t > i ? i : t) : t < i ? i : t > e ? e : t;
		};
	var C = function (t) {
		return (
			(t = t.map(function (t) {
				if ('rgb' != (t = z(t)).space) {
					if ('hsl' != t.space) throw 'c.spacespace is not supported.';
					t.values = L(t.values);
				}
				return t.values.push(t.alpha), t.values;
			})),
			function (e, i) {
				(i = i || T), (e = I(e, 0, 1));
				var r = (t.length - 1) * e,
					n = Math.floor(r),
					a = Math.ceil(r);
				e = r - n;
				var s = t[n],
					o = t[a],
					l = s.map(function (t, r) {
						return (t = i(t, o[r], e)), r < 3 && (t = Math.round(t)), t;
					});
				return 1 === l[3] ? 'rgb(' + l.slice(0, 3) + ')' : 'rgba(' + l + ')';
			}
		);
	};
	var D = {
			'aliceblue': '#f0f8ff',
			'antiquewhite': '#faebd7',
			'aqua': '#00ffff',
			'aquamarine': '#7fffd4',
			'azure': '#f0ffff',
			'beige': '#f5f5dc',
			'bisque': '#ffe4c4',
			'black': '#000000',
			'blanchedalmond': '#ffebcd',
			'blue': '#0000ff',
			'blueviolet': '#8a2be2',
			'brown': '#a52a2a',
			'burlywood': '#deb887',
			'cadetblue': '#5f9ea0',
			'chartreuse': '#7fff00',
			'chocolate': '#d2691e',
			'coral': '#ff7f50',
			'cornflowerblue': '#6495ed',
			'cornsilk': '#fff8dc',
			'crimson': '#dc143c',
			'cyan': '#00ffff',
			'darkblue': '#00008b',
			'darkcyan': '#008b8b',
			'darkgoldenrod': '#b8860b',
			'darkgray': '#a9a9a9',
			'darkgreen': '#006400',
			'darkkhaki': '#bdb76b',
			'darkmagenta': '#8b008b',
			'darkolivegreen': '#556b2f',
			'darkorange': '#ff8c00',
			'darkorchid': '#9932cc',
			'darkred': '#8b0000',
			'darksalmon': '#e9967a',
			'darkseagreen': '#8fbc8f',
			'darkslateblue': '#483d8b',
			'darkslategray': '#2f4f4f',
			'darkturquoise': '#00ced1',
			'darkviolet': '#9400d3',
			'deeppink': '#ff1493',
			'deepskyblue': '#00bfff',
			'dimgray': '#696969',
			'dodgerblue': '#1e90ff',
			'firebrick': '#b22222',
			'floralwhite': '#fffaf0',
			'forestgreen': '#228b22',
			'fuchsia': '#ff00ff',
			'gainsboro': '#dcdcdc',
			'ghostwhite': '#f8f8ff',
			'gold': '#ffd700',
			'goldenrod': '#daa520',
			'gray': '#808080',
			'green': '#008000',
			'greenyellow': '#adff2f',
			'honeydew': '#f0fff0',
			'hotpink': '#ff69b4',
			'indianred ': '#cd5c5c',
			'indigo': '#4b0082',
			'ivory': '#fffff0',
			'khaki': '#f0e68c',
			'lavender': '#e6e6fa',
			'lavenderblush': '#fff0f5',
			'lawngreen': '#7cfc00',
			'lemonchiffon': '#fffacd',
			'lightblue': '#add8e6',
			'lightcoral': '#f08080',
			'lightcyan': '#e0ffff',
			'lightgoldenrodyellow': '#fafad2',
			'lightgrey': '#d3d3d3',
			'lightgreen': '#90ee90',
			'lightpink': '#ffb6c1',
			'lightsalmon': '#ffa07a',
			'lightseagreen': '#20b2aa',
			'lightskyblue': '#87cefa',
			'lightslategray': '#778899',
			'lightsteelblue': '#b0c4de',
			'lightyellow': '#ffffe0',
			'lime': '#00ff00',
			'limegreen': '#32cd32',
			'linen': '#faf0e6',
			'magenta': '#ff00ff',
			'maroon': '#800000',
			'mediumaquamarine': '#66cdaa',
			'mediumblue': '#0000cd',
			'mediumorchid': '#ba55d3',
			'mediumpurple': '#9370d8',
			'mediumseagreen': '#3cb371',
			'mediumslateblue': '#7b68ee',
			'mediumspringgreen': '#00fa9a',
			'mediumturquoise': '#48d1cc',
			'mediumvioletred': '#c71585',
			'midnightblue': '#191970',
			'mintcream': '#f5fffa',
			'mistyrose': '#ffe4e1',
			'moccasin': '#ffe4b5',
			'navajowhite': '#ffdead',
			'navy': '#000080',
			'oldlace': '#fdf5e6',
			'olive': '#808000',
			'olivedrab': '#6b8e23',
			'orange': '#ffa500',
			'orangered': '#ff4500',
			'orchid': '#da70d6',
			'palegoldenrod': '#eee8aa',
			'palegreen': '#98fb98',
			'paleturquoise': '#afeeee',
			'palevioletred': '#d87093',
			'papayawhip': '#ffefd5',
			'peachpuff': '#ffdab9',
			'peru': '#cd853f',
			'pink': '#ffc0cb',
			'plum': '#dda0dd',
			'powderblue': '#b0e0e6',
			'purple': '#800080',
			'rebeccapurple': '#663399',
			'red': '#ff0000',
			'rosybrown': '#bc8f8f',
			'royalblue': '#4169e1',
			'saddlebrown': '#8b4513',
			'salmon': '#fa8072',
			'sandybrown': '#f4a460',
			'seagreen': '#2e8b57',
			'seashell': '#fff5ee',
			'sienna': '#a0522d',
			'silver': '#c0c0c0',
			'skyblue': '#87ceeb',
			'slateblue': '#6a5acd',
			'slategray': '#708090',
			'snow': '#fffafa',
			'springgreen': '#00ff7f',
			'steelblue': '#4682b4',
			'tan': '#d2b48c',
			'teal': '#008080',
			'thistle': '#d8bfd8',
			'tomato': '#ff6347',
			'turquoise': '#40e0d0',
			'violet': '#ee82ee',
			'wheat': '#f5deb3',
			'white': '#ffffff',
			'whitesmoke': '#f5f5f5',
			'yellow': '#ffff00',
			'yellowgreen': '#9acd32',
		},
		M = /rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)/,
		F = /rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}|.*)\)/,
		Y = /hsla\((\d{1,3}),\s*(\d{1,3})\%,\s*(\d{1,3})\%,\s*(\d{1,3}|.*)\)/,
		U = /hsl\((\d{1,3}),\s*(\d{1,3})\%,\s*(\d{1,3})\%\)/,
		X = /^#?([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})$/;
	function j(t) {
		var e;
		if (t.match(M))
			return [
				(e = t
					.match(M)
					.slice(1, 4)
					.map(function (t) {
						return parseInt(t);
					}))[0],
				e[1],
				e[2],
				1,
			];
		if (t.match(F))
			return [
				(e = t
					.match(F)
					.slice(1, 5)
					.map(function (t) {
						return parseFloat(t);
					}))[0],
				e[1],
				e[2],
				e[3],
			];
		if (t.match(U))
			return (
				(e = t
					.match(U)
					.slice(1, 4)
					.map(function (t) {
						return parseInt(t);
					})),
				[].concat(u(N(e[0], e[1], e[2])), [1])
			);
		if (t.match(Y))
			return (
				(e = t
					.match(Y)
					.slice(1, 5)
					.map(function (t) {
						return parseFloat(t);
					})),
				[].concat(u(N(e[0], e[1], e[2])), [e[3]])
			);
		if (t.match(X)) return [].concat(u(B(t)), [1]);
		if ('string' == typeof t) {
			var i = D[t];
			return void 0 !== i ? [].concat(u(B(i)), [1]) : [0, 0, 0, 0];
		}
		return console.warn('I have no idea what "'.concat(t, ' is."')), [0, 0, 0, 0];
	}
	function N(t, e, i) {
		if (((i /= 100), 0 === (e /= 100))) return [i, i, i];
		var r = function (t, e, i) {
			return (
				i < 0 && (i += 1),
				i > 1 && (i -= 1),
				i < 1 / 6
					? t + 6 * (e - t) * i
					: i < 0.5
					? e
					: i < 2 / 3
					? t + (e - t) * (2 / 3 - i) * 6
					: t
			);
		};
		t /= 360;
		var n = i < 0.5 ? i * (1 + e) : i + e - i * e,
			a = 2 * i - n;
		return [
			Math.round(255 * r(a, n, t + 1 / 3)),
			Math.round(255 * r(a, n, t)),
			Math.round(255 * r(a, n, t - 1 / 3)),
		];
	}
	function B(t) {
		var e = X.exec(t);
		return e
			? [parseInt(e[1], 16), parseInt(e[2], 16), parseInt(e[3], 16)]
			: (console.warn('Invalid hex used: '.concat(t)), [0, 0, 0]);
	}
	function q(t) {
		return t
			? 'rgba('.concat(j(t).join(','), ')')
			: (console.warn('Incorrect color: '.concat(t)), 'rgba(0,0,0,0)');
	}
	function H(t, e) {
		var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
		return i ? Math.floor(Math.random() * (e - t + 1)) + t : Math.random() * (e - t) + t;
	}
	function G(t, e) {
		var i = {};
		return (
			Object.entries(e).forEach(function (e) {
				var r = f(e, 2),
					n = r[0],
					a = r[1];
				t[n] !== a && (i[n] = a);
			}),
			i
		);
	}
	function K(t, e, i, r, n) {
		var a = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5],
			s = 0;
		(s = (e / r + (s = t / i)) / 2) > 1 ? (s = 1) : s < 0 && (s = 0);
		var o,
			l = C(n)(s);
		return l.match(M)
			? ((o = l
					.match(M)
					.slice(1, 4)
					.map(function (t) {
						return parseInt(t);
					})),
			  a
					? 'rgba('.concat(o[0], ', ').concat(o[1], ', ').concat(o[2], ', 1)')
					: [o[0], o[1], o[2], 1])
			: l.match(F)
			? ((o = l
					.match(F)
					.slice(1, 5)
					.map(function (t) {
						return parseFloat(t);
					})),
			  a
					? 'rgba('
							.concat(o[0], ', ')
							.concat(o[1], ', ')
							.concat(o[2], ', ')
							.concat(o[3], ')')
					: [o[0], o[1], o[2], o[3]])
			: a
			? 'rgba(0,0,0,0)'
			: [0, 0, 0, 0];
	}
	function $(t, e) {
		return Number(Math.round(+(t + 'e' + e)) + 'e-' + e);
	}
	var W = (function () {
			function t(i, r) {
				e(this, t),
					n(this, 'canvas', void 0),
					n(this, 'settings', void 0),
					n(this, 'animating', !1),
					n(this, 'dim', void 0),
					n(this, 'stats', void 0),
					n(this, 'timings', void 0),
					(this.resize = this.resize.bind(this)),
					(this.canvas = i),
					(this.settings = r),
					(this.dim = { width: 0, height: 0 }),
					(this.stats = new x()),
					(this.timings = { triangles: new J(), particles: new J() }),
					r.color1 &&
					r.color2 &&
					'string' == typeof r.color1 &&
					'string' == typeof r.color2
						? (this.settings.colors = [q(r.color1), q(r.color2)])
						: this.settings.colors &&
						  (this.settings.colors = this.settings.colors.map(function (t) {
								return q(t);
						  })),
					r.automaticResize && window.addEventListener('resize', this.resize),
					this.resize(null, !1);
			}
			return (
				r(t, [
					{
						key: 'debug',
						value: function () {
							this.stats.showPanel(0), document.body.appendChild(this.stats.dom);
						},
					},
					{
						key: 'resize',
						value: function () {
							var t =
									!(arguments.length > 1 && void 0 !== arguments[1]) ||
									arguments[1],
								e = this.canvas.parentElement;
							e &&
								((this.canvas.width = e.clientWidth),
								(this.canvas.height = e.clientHeight)),
								(this.dim.width === this.canvas.width &&
									this.dim.height === this.canvas.height) ||
									((this.dim.width = this.canvas.width),
									(this.dim.height = this.canvas.height),
									t && this.init());
						},
					},
					{
						key: 'stop',
						value: function () {
							this.animating && (this.animating = !1);
						},
					},
					{
						key: 'resume',
						value: function () {
							this.animating || (this.animating = !0);
						},
					},
				]),
				t
			);
		})(),
		J = (function () {
			function t() {
				e(this, t),
					n(this, 'min', 1 / 0),
					n(this, 'max', 0),
					n(this, 'current', 0),
					n(this, 'curTime', 0);
			}
			return (
				r(t, [
					{
						key: 'set',
						value: function (t) {
							t < this.min && (this.min = t),
								t > this.max && (this.max = t),
								(this.current = t);
						},
					},
					{
						key: 'start',
						value: function () {
							this.curTime = performance.now();
						},
					},
					{
						key: 'end',
						value: function () {
							this.set(performance.now() - this.curTime);
						},
					},
				]),
				t
			);
		})(),
		Q = {
			count: [2, 5],
			interval: [5e3, 1e4],
			radius: [1, 2],
			opacity: [0.1, 0.7],
			color: '#ffffff',
			variationX: [5, 15],
			variationY: [2.5, 7.5],
		},
		Z = {
			triangleSize: 130,
			bleed: 120,
			noise: 60,
			colors: ['rgba(11,135,147,1)', 'rgba(54,0,51,1)'],
			pointVariationX: 20,
			pointVariationY: 35,
			pointAnimationSpeed: 7500,
			maxFps: 144,
			animationOffset: 250,
			image: void 0,
			imageOpacity: 0.4,
			automaticResize: !0,
			particleSettings: Q,
		};
	var tt = (function (t) {
			s(l, t);
			var i = (function (t) {
				function e() {
					if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
					if (Reflect.construct.sham) return !1;
					if ('function' == typeof Proxy) return !0;
					try {
						return (
							Date.prototype.toString.call(
								Reflect.construct(Date, [], function () {}),
							),
							!0
						);
					} catch (t) {
						return !1;
					}
				}
				return function () {
					var i,
						r = o(t);
					if (e()) {
						var n = o(this).constructor;
						i = Reflect.construct(r, arguments, n);
					} else i = r.apply(this, arguments);
					return c(this, i);
				};
			})(l);
			function l(t, r) {
				var a;
				return (
					e(this, l),
					n(h((a = i.call(this, t, r))), 'ctx', void 0),
					n(h(a), 'animating', !1),
					n(h(a), 'pattern', void 0),
					n(h(a), 'points', void 0),
					n(h(a), 'triangles', void 0),
					n(h(a), 'particles', void 0),
					n(h(a), 'lastDraw', void 0),
					(a.points = []),
					(a.triangles = []),
					(a.particles = []),
					(a.lastDraw = 0),
					(a.ctx = t.getContext('2d')),
					a.settings.image &&
						(a.pattern = a.ctx.createPattern(a.settings.image, 'repeat')),
					a.init(),
					a.animate(),
					a
				);
			}
			return (
				r(l, null, [
					{
						key: 'create',
						value: function (t, e) {
							if (t)
								return (
									e && (e.particleSettings = a({}, Q, e.particleSettings)),
									new l(t, a({}, Z, e))
								);
							console.warn('Need a valid canvas element!');
						},
					},
				]),
				r(l, [
					{
						key: 'init',
						value: function () {
							this.stop(),
								this.setupPoints(),
								this.delaunate(),
								this.particulate(),
								this.resume();
						},
					},
					{
						key: 'particulate',
						value: function () {
							this.particles = [];
							for (
								var t = this.settings.particleSettings.count,
									e = (this.dim.height * this.dim.width) / 1e4,
									i = 0;
								i < e;
								i++
							) {
								var r = t;
								Array.isArray(t) && (r = H(t[0], t[1], !0));
								for (var n = 0; n < r; n++) this.particles.push(new it(this));
							}
						},
					},
					{
						key: 'setupPoints',
						value: function () {
							this.points = [];
							for (
								var t = this.settings.triangleSize, e = this.settings.bleed, i = -e;
								i < this.dim.width + 2 * e;
								i += t
							)
								for (var r = -e; r < this.dim.height + 2 * e; r += t)
									this.points.push({
										initX: i,
										initY: r,
										x: i,
										y: r,
										xNoise: H(-0.5, 0.5),
										yNoise: H(-0.5, 0.5),
									});
						},
					},
					{
						key: 'delaunate',
						value: function () {
							var t = this.settings.noise;
							this.triangles = [];
							for (
								var e = this.points.map(function (e) {
										return [
											$(e.x + e.xNoise * t, 14),
											$(e.y + e.yNoise * t, 14),
										];
									}),
									i = p.from(e).triangles,
									r = 0;
								r < i.length;
								r += 3
							)
								this.triangles.push(new et(this, i.slice(r, r + 3)));
						},
					},
					{
						key: 'updateSettings',
						value: function (t) {
							var e = G(this.settings, t);
							if (
								(t.force && (e = t),
								e.triangleSize &&
									((this.settings.triangleSize = e.triangleSize),
									this.setupPoints(),
									this.delaunate()),
								e.bleed &&
									((this.settings.bleed = e.bleed),
									this.setupPoints(),
									this.delaunate()),
								e.noise)
							) {
								var i = e.noise;
								(this.settings.noise = i),
									i > this.settings.triangleSize && this.delaunate();
							}
							e.colors &&
								(Array.isArray(e.colors) &&
									(this.settings.colors = e.colors.map(function (t) {
										return q(t);
									})),
								this.triangles.forEach(function (t) {
									t.updateColor();
								})),
								e.pointVariationX &&
									(this.settings.pointVariationX = e.pointVariationX),
								e.pointVariationY &&
									(this.settings.pointVariationY = e.pointVariationY),
								e.pointAnimationSpeed &&
									(this.settings.pointAnimationSpeed = e.pointAnimationSpeed),
								e.maxFps && (this.settings.maxFps = e.maxFps),
								e.animationOffset &&
									(this.settings.animationOffset = e.animationOffset),
								e.image &&
									((this.settings.image = e.image),
									(this.pattern = this.ctx.createPattern(
										this.settings.image,
										'repeat',
									))),
								e.imageOpacity && (this.settings.imageOpacity = e.imageOpacity),
								void 0 !== e.automaticResize &&
									((this.settings.automaticResize = e.automaticResize),
									e.automaticResize
										? window.addEventListener('resize', this.resize)
										: window.removeEventListener('resize', this.resize)),
								e.particleSettings &&
									((e = e.particleSettings),
									(this.settings.particleSettings = a(
										{},
										this.settings.particleSettings,
										e,
									)),
									this.particles.forEach(function (t) {
										t.updateSettings(e);
									}),
									e.count && this.particulate());
						},
					},
					{
						key: 'updatePoints',
						value: function () {
							var t = this.settings.animationOffset,
								e = this.settings.pointVariationX,
								i = this.settings.pointVariationY,
								r = this.settings.pointAnimationSpeed,
								n = (2 * Math.PI * performance.now()) / r;
							this.points = this.points.map(function (r) {
								var a = r.initX / t;
								return (
									(r.x = r.initX + Math.sin(a + n) * e),
									(r.y = r.initY + Math.cos(a + n) * i),
									r
								);
							});
						},
					},
					{
						key: 'stop',
						value: function () {
							this.animating && (this.animating = !1);
						},
					},
					{
						key: 'resume',
						value: function () {
							this.animating || (this.animating = !0);
						},
					},
					{
						key: 'animate',
						value: function () {
							var t = performance.now();
							if ((requestAnimationFrame(this.animate.bind(this)), this.animating)) {
								var e = t - this.lastDraw,
									i = 1e3 / this.settings.maxFps;
								if (!(e < i)) {
									(this.lastDraw = t - (e % i)), this.stats.begin();
									var r = this.ctx;
									r.clearRect(0, 0, this.dim.width, this.dim.height),
										this.timings.triangles.start(),
										this.triangles.forEach(function (t) {
											t.draw();
										}),
										this.timings.triangles.end(),
										this.timings.particles.start(),
										this.particles.forEach(function (t) {
											t.draw();
										}),
										this.timings.particles.end(),
										this.pattern &&
											((r.globalAlpha = this.settings.imageOpacity),
											(r.fillStyle = this.pattern),
											r.fillRect(0, 0, this.dim.width, this.dim.height),
											(r.globalAlpha = 1)),
										this.updatePoints(),
										this.stats.end();
								}
							}
						},
					},
				]),
				l
			);
		})(W),
		et = (function () {
			function t(i, r) {
				e(this, t),
					n(this, 'parent', void 0),
					n(this, 'points', void 0),
					n(this, 'color', ''),
					(this.parent = i),
					(this.points = r),
					this.updateColor();
			}
			return (
				r(t, [
					{
						key: 'updateColor',
						value: function () {
							for (
								var t = this.parent.settings.noise,
									e = this.getPoints(),
									i = { x: 0, y: 0 },
									r = 0;
								r < e.length;
								r++
							) {
								var n = e[r];
								(i.x += n.x + n.xNoise * t), (i.y += n.y + n.yNoise * t);
							}
							(i.x = i.x / 3),
								(i.y = i.y / 3),
								(this.color = K(
									i.x,
									i.y,
									this.parent.dim.width,
									this.parent.dim.height,
									this.parent.settings.colors,
								));
						},
					},
					{
						key: 'getPoints',
						value: function () {
							for (var t = [], e = 0; e < this.points.length; e++)
								t.push(this.parent.points[this.points[e]]);
							return t;
						},
					},
					{
						key: 'lines',
						value: function () {
							var t = this.parent.ctx,
								e = this.parent.settings.noise,
								i = this.getPoints();
							(t.fillStyle = this.color),
								(t.strokeStyle = this.color),
								(t.lineWidth = 1),
								t.beginPath(),
								i.forEach(function (i, r) {
									var n = i.x + i.xNoise * e,
										a = i.y + i.yNoise * e;
									0 === r ? t.moveTo(n, a) : t.lineTo(n, a);
								}),
								t.closePath();
						},
					},
					{
						key: 'stroke',
						value: function () {
							this.lines(), this.parent.ctx.stroke();
						},
					},
					{
						key: 'fill',
						value: function () {
							this.lines(), this.parent.ctx.fill();
						},
					},
					{
						key: 'draw',
						value: function () {
							this.lines(), this.parent.ctx.fill(), this.parent.ctx.stroke();
						},
					},
				]),
				t
			);
		})(),
		it = (function () {
			function t(i) {
				e(this, t),
					n(this, 'parent', void 0),
					n(this, 'color', void 0),
					n(this, 'x', void 0),
					n(this, 'y', void 0),
					n(this, 'opacity', 0),
					n(this, 'radius', void 0),
					n(this, 'interval', void 0),
					n(this, 'variationX', void 0),
					n(this, 'variationY', void 0),
					(this.parent = i);
				var r = this.parent.dim;
				(this.x = H(0, r.width)),
					(this.y = H(0, r.height)),
					this.updateSettings(this.parent.settings.particleSettings);
			}
			return (
				r(t, [
					{
						key: 'updateSettings',
						value: function (t) {
							if (t.color || t.opacity) {
								var e = j(this.parent.settings.particleSettings.color),
									i = t.opacity
										? this.parent.settings.particleSettings.opacity
										: this.opacity;
								Array.isArray(i) && (i = H(i[0], i[1])),
									(this.opacity = i),
									(this.color = 'rgba('
										.concat(e[0], ', ')
										.concat(e[1], ', ')
										.concat(e[2], ', ')
										.concat(i, ')'));
							}
							if (t.radius) {
								var r = t.radius;
								(this.radius = r),
									Array.isArray(r) && (this.radius = H(r[0], r[1]));
							}
							if (t.interval) {
								var n = t.interval;
								(this.interval = n),
									Array.isArray(n) && (this.interval = H(n[0], n[1]));
							}
							if (t.variationX) {
								var a = t.variationX;
								(this.variationX = a),
									Array.isArray(a) && (this.variationX = H(a[0], a[1]));
							}
							if (t.variationY) {
								var s = t.variationY;
								(this.variationY = s),
									Array.isArray(s) && (this.variationY = H(s[0], s[1]));
							}
						},
					},
					{
						key: 'shape',
						value: function () {
							var t = this.parent.ctx;
							t.beginPath(), (t.fillStyle = this.color), (t.strokeStyle = this.color);
							var e =
									this.x +
									Math.sin((2 * Math.PI * performance.now()) / this.interval) *
										this.variationX,
								i =
									this.y +
									Math.cos((2 * Math.PI * performance.now()) / this.interval) *
										this.variationY;
							t.arc(e, i, this.radius, 0, 2 * Math.PI);
						},
					},
					{
						key: 'stroke',
						value: function () {
							this.shape(), this.parent.ctx.stroke();
						},
					},
					{
						key: 'fill',
						value: function () {
							this.shape(), this.parent.ctx.fill();
						},
					},
					{
						key: 'draw',
						value: function () {
							this.shape(), this.parent.ctx.fill();
						},
					},
				]),
				t
			);
		})();
	function rt(t, e, i) {
		var r = nt(t, t.VERTEX_SHADER, e),
			n = nt(t, t.FRAGMENT_SHADER, i),
			a = t.createProgram();
		if (
			(t.attachShader(a, r),
			t.attachShader(a, n),
			t.linkProgram(a),
			!t.getProgramParameter(a, t.LINK_STATUS))
		)
			throw (t.deleteProgram(a), new Error(t.getProgramInfoLog(a)));
		return a;
	}
	function nt(t, e, i) {
		var r = t.createShader(e);
		if (
			(t.shaderSource(r, i), t.compileShader(r), !t.getShaderParameter(r, t.COMPILE_STATUS))
		) {
			var n = t.getShaderInfoLog(r);
			throw (t.deleteShader(r), new Error(n));
		}
		return r;
	}
	function at(t) {
		var e = t.split('\n'),
			i = [[], []],
			r = null;
		return (
			e.forEach(function (t) {
				if (t.includes('#shader'))
					return (
						t.includes('vertex') && (r = 0), void (t.includes('fragment') && (r = 1))
					);
				null !== r && i[r].push(t);
			}),
			i.map(function (t) {
				return t.join('\n');
			})
		);
	}
	var st = (function (t) {
		s(l, t);
		var i = (function (t) {
			function e() {
				if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
				if (Reflect.construct.sham) return !1;
				if ('function' == typeof Proxy) return !0;
				try {
					return (
						Date.prototype.toString.call(Reflect.construct(Date, [], function () {})),
						!0
					);
				} catch (t) {
					return !1;
				}
			}
			return function () {
				var i,
					r = o(t);
				if (e()) {
					var n = o(this).constructor;
					i = Reflect.construct(r, arguments, n);
				} else i = r.apply(this, arguments);
				return c(this, i);
			};
		})(l);
		function l(t, r) {
			var a;
			e(this, l),
				n(h((a = i.call(this, t, r))), 'gl', void 0),
				n(h(a), 'triangleShaderProgram', void 0),
				n(h(a), 'particleShaderProgram', void 0),
				n(h(a), 'verticeCount', void 0),
				n(h(a), 'particleCount', void 0),
				n(h(a), 'triangleVerticeData', void 0),
				n(h(a), 'particlePointData', void 0),
				n(h(a), 'lastDraw', void 0),
				(a.verticeCount = 0),
				(a.particleCount = 0),
				(a.gl = t.getContext('webgl', { alpha: !1 }));
			var s = a.gl;
			s.getExtension('GL_OES_standard_derivatives'),
				s.getExtension('OES_standard_derivatives'),
				s.blendFunc(s.SRC_ALPHA, s.ONE_MINUS_SRC_ALPHA),
				s.enable(s.BLEND);
			var o = f(
					at(
						'#shader vertex\r\n#define PI 3.1415926538\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aNoise;\r\nattribute vec4 aColor;\r\n\r\nuniform vec2 uResolution;\r\nuniform float uAnimationOffset;\r\nuniform float uTime;\r\nuniform float uNoise;\r\nuniform float uPointVariationX;\r\nuniform float uPointVariationY;\r\nuniform float uPointAnimationSpeed;\r\n\r\nvarying vec4 vColor;\r\n\r\nvoid main(){\r\n\tfloat per = aVertexPosition[0] / uAnimationOffset;\r\n\r\n\tvec2 noise = aNoise * uNoise;\r\n\r\n\tfloat time = PI * 2.0 * uTime / uPointAnimationSpeed;\r\n\t\r\n\tfloat x = aVertexPosition[0] + sin(per + time) * uPointVariationX;\r\n\tfloat y = aVertexPosition[1] + cos(per + time) * uPointVariationY;\r\n\r\n\tvec2 translate = vec2(x,y);\r\n\r\n\ttranslate = translate + noise;\r\n\ttranslate = translate / uResolution;\r\n\ttranslate = translate * 2.0;\r\n\ttranslate = translate - 1.0;\r\n\r\n\tvColor = aColor;\r\n\r\n\tgl_Position = vec4(translate * vec2(1, -1), 0, 1);\r\n}\r\n\r\n#shader fragment\r\nprecision mediump float;\r\n\r\nvarying vec4 vColor;\r\n\r\nvoid main(){\r\n\tgl_FragColor = vColor;\r\n}',
					),
					2,
				),
				c = o[0],
				u = o[1];
			a.triangleShaderProgram = rt(a.gl, c, u);
			var d = f(
				at(
					'#shader vertex\r\n#define PI 3.1415926538\r\n\r\nattribute vec2 aPoint;\r\nattribute float aInterval;\r\nattribute float aRadius;\r\nattribute float aVariationX;\r\nattribute float aVariationY;\r\nattribute float aOpacity;\r\n\r\nuniform float uTime;\r\nuniform vec2 uResolution;\r\n\r\nvarying float vOpacity;\r\n\r\nvoid main() {\r\n\r\n\tvec2 pos = aPoint;\r\n\r\n\tpos.x += sin(PI * 2.0 * uTime / aInterval) * aVariationX;\r\n\tpos.y += cos(PI * 2.0 * uTime / aInterval) * aVariationY;\r\n\r\n\tpos = pos / uResolution;\r\n\tpos = pos * 2.0;\r\n\tpos = pos - 1.0;\r\n\r\n\tgl_Position = vec4(pos * vec2(1, -1), 0, 1);\r\n\r\n\tgl_PointSize = aRadius * 3.0;\r\n\r\n\tvOpacity = aOpacity;\r\n}\r\n\r\n#shader fragment\r\n#ifdef GL_OES_standard_derivatives\r\n#extension GL_OES_standard_derivatives : enable\r\n#endif\r\nprecision mediump float;\r\n\r\nuniform vec3 uColor;\r\n\r\nvarying float vOpacity;\r\n\r\nvoid main() {\r\n\tfloat r = 0.0, delta = 0.0, alpha = 1.0;\r\n\tvec2 cxy = 2.0 * gl_PointCoord - 1.0;\r\n\tr = dot(cxy, cxy);\r\n\t#ifdef GL_OES_standard_derivatives\r\n\t\tdelta = fwidth(r);\r\n\t\talpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\r\n\t#endif\r\n\r\n\tvec4 color = vec4(uColor, vOpacity);\r\n\r\n\tgl_FragColor = color * alpha;\r\n}',
				),
				2,
			);
			return (
				(c = d[0]),
				(u = d[1]),
				(a.particleShaderProgram = rt(a.gl, c, u)),
				(a.triangleVerticeData = {
					colors: [],
					noisedPoints: [],
					indices: new Uint32Array(),
					vertices: [],
					noise: [],
				}),
				(a.particlePointData = {
					points: [],
					interval: [],
					radius: [],
					opacity: [],
					variationX: [],
					variationY: [],
				}),
				(a.lastDraw = 0),
				a.init(),
				a.animate(),
				a
			);
		}
		return (
			r(l, null, [
				{
					key: 'webglSupport',
					value: function () {
						try {
							var t = document.createElement('canvas');
							return !!window.WebGLRenderingContext && t.getContext('webgl');
						} catch (t) {
							return !1;
						}
					},
				},
				{
					key: 'create',
					value: function (t, e) {
						if (t) {
							if (this.webglSupport())
								return (
									e && (e.particleSettings = a({}, Q, e.particleSettings)),
									new l(t, a({}, Z, e))
								);
							console.warn('Your browser does not support webgl :(');
						} else console.warn('Need a valid canvas element!');
					},
				},
			]),
			r(l, [
				{
					key: 'generateVertices',
					value: function () {
						for (
							var t = this.settings.noise,
								e = [],
								i = [],
								r = [],
								n = [],
								a = this.settings.triangleSize,
								s = this.settings.bleed,
								o = -s;
							o < this.dim.width + 2 * s;
							o += a
						)
							for (var l = -s; l < this.dim.height + 2 * s; l += a)
								e.push(o), e.push(l), i.push(H(-0.5, 0.5)), i.push(H(-0.5, 0.5));
						for (var h = [], c = 0; c < e.length; c += 2)
							h.push([e[c] + i[c] * t, e[c + 1] + i[c + 1] * t]);
						this.triangleVerticeData.noisedPoints = h;
						var f = p.from(h).triangles;
						(this.triangleVerticeData.indices = f), this.calculateColors();
						for (var u = 0; u < f.length; u++) {
							var d = 2 * f[u],
								g = d + 1;
							r.push(e[d]), r.push(e[g]), n.push(i[d]), n.push(i[g]);
						}
						(this.triangleVerticeData.vertices = r),
							(this.triangleVerticeData.noise = n),
							(this.verticeCount = r.length);
					},
				},
				{
					key: 'particulate',
					value: function () {
						for (
							var t,
								e = this.dim,
								i = this.settings.particleSettings,
								r = {
									points: [],
									interval: [],
									radius: [],
									variationX: [],
									variationY: [],
									opacity: [],
								},
								n = this.settings.particleSettings.count,
								a = (this.dim.height * this.dim.width) / 1e4,
								s = 0;
							s < a;
							s++
						) {
							var o = n;
							Array.isArray(n) && (o = H(n[0], n[1], !0));
							for (var l = 0; l < o; l++) {
								r.points.push(H(0, e.width), H(0, e.height));
								var h = i.interval;
								Array.isArray(h) && (h = H(h[0], h[1])), r.interval.push(h);
								var c = i.radius;
								Array.isArray(c) && (c = H(c[0], c[1])), r.radius.push(c);
								var f = i.variationX;
								Array.isArray(f) && (f = H(f[0], f[1])), r.variationX.push(f);
								var u = i.variationY;
								Array.isArray(u) && (u = H(u[0], u[1])), r.variationY.push(u);
								var d = i.opacity;
								Array.isArray(d) && (d = H(d[0], d[1])), r.opacity.push(d);
							}
						}
						var g = this.gl.getUniformLocation(this.particleShaderProgram, 'uColor'),
							p = j(
								null === (t = this.settings.particleSettings) || void 0 === t
									? void 0
									: t.color,
							).map(function (t, e) {
								return (e + 1) % 4 != 0 ? t / 255 : t;
							});
						this.gl.uniform3f(g, p[0], p[1], p[2]),
							(this.particlePointData = r),
							(this.particleCount = r.points.length / 2);
					},
				},
				{
					key: 'calculateColors',
					value: function () {
						for (
							var t = this.triangleVerticeData,
								e = t.indices,
								i = t.noisedPoints,
								r = [],
								n = 0;
							n < e.length;
							n += 3
						)
							for (
								var a = i[e[n]],
									s = i[e[n + 1]],
									o = i[e[n + 2]],
									l = {
										x: (a[0] + s[0] + o[0]) / 3,
										y: (a[1] + s[1] + o[1]) / 3,
									},
									h = K(
										l.x,
										l.y,
										this.dim.width,
										this.dim.height,
										this.settings.colors,
										!1,
									).map(function (t, e) {
										return (e + 1) % 4 != 0 ? t / 255 : t;
									}),
									c = 0;
								c < 3;
								c++
							)
								h.forEach(function (t) {
									r.push(t);
								});
						this.triangleVerticeData.colors = r;
					},
				},
				{
					key: 'setBuffer',
					value: function (t, e, i, r) {
						var n = this.gl,
							a = n.getAttribLocation(t, e);
						a < 0 && console.log('Unable to find: '.concat(e));
						var s = n.createBuffer();
						n.bindBuffer(n.ARRAY_BUFFER, s);
						var o = new Float32Array(i);
						n.bufferData(n.ARRAY_BUFFER, o, n.STATIC_DRAW),
							n.vertexAttribPointer(a, r, n.FLOAT, !1, 0, 0),
							n.enableVertexAttribArray(a);
					},
				},
				{
					key: 'init',
					value: function () {
						this.stop();
						var t = this.gl;
						t.viewport(0, 0, t.canvas.width, t.canvas.height),
							t.useProgram(this.triangleShaderProgram),
							this.generateVertices();
						var e = t.getUniformLocation(
							this.triangleShaderProgram,
							'uPointVariationX',
						);
						t.uniform1f(e, this.settings.pointVariationX);
						var i = t.getUniformLocation(
							this.triangleShaderProgram,
							'uPointVariationY',
						);
						t.uniform1f(i, this.settings.pointVariationY);
						var r = t.getUniformLocation(
							this.triangleShaderProgram,
							'uPointAnimationSpeed',
						);
						t.uniform1f(r, this.settings.pointAnimationSpeed);
						var n = t.getUniformLocation(this.triangleShaderProgram, 'uNoise');
						t.uniform1f(n, this.settings.noise);
						var a = t.getUniformLocation(
							this.triangleShaderProgram,
							'uAnimationOffset',
						);
						t.uniform1f(a, this.settings.animationOffset),
							t.useProgram(this.particleShaderProgram),
							this.particulate(),
							this.resume();
					},
				},
				{
					key: 'bindTriangleBuffers',
					value: function () {
						this.setBuffer(
							this.triangleShaderProgram,
							'aColor',
							this.triangleVerticeData.colors,
							4,
						),
							this.setBuffer(
								this.triangleShaderProgram,
								'aVertexPosition',
								this.triangleVerticeData.vertices,
								2,
							),
							this.setBuffer(
								this.triangleShaderProgram,
								'aNoise',
								this.triangleVerticeData.noise,
								2,
							);
					},
				},
				{
					key: 'bindParticleBuffers',
					value: function () {
						this.setBuffer(
							this.particleShaderProgram,
							'aPoint',
							this.particlePointData.points,
							2,
						),
							this.setBuffer(
								this.particleShaderProgram,
								'aInterval',
								this.particlePointData.interval,
								1,
							),
							this.setBuffer(
								this.particleShaderProgram,
								'aRadius',
								this.particlePointData.radius,
								1,
							),
							this.setBuffer(
								this.particleShaderProgram,
								'aVariationX',
								this.particlePointData.variationX,
								1,
							),
							this.setBuffer(
								this.particleShaderProgram,
								'aVariationY',
								this.particlePointData.variationY,
								1,
							),
							this.setBuffer(
								this.particleShaderProgram,
								'aOpacity',
								this.particlePointData.opacity,
								1,
							);
					},
				},
				{
					key: 'animate',
					value: function () {
						this.gl;
						var t = performance.now();
						if ((requestAnimationFrame(this.animate.bind(this)), this.animating)) {
							var e = t - this.lastDraw,
								i = 1e3 / this.settings.maxFps;
							e < i ||
								((this.lastDraw = t - (e % i)),
								this.stats.begin(),
								(function (t, e, i, r) {
									i(), t.useProgram(e);
									var n = t.getUniformLocation(e, 'uTime');
									t.uniform1f(n, performance.now());
									var a = t.getUniformLocation(e, 'uResolution');
									t.uniform2f(a, t.canvas.width, t.canvas.height),
										t.drawArrays(t.TRIANGLES, 0, r);
								})(
									this.gl,
									this.triangleShaderProgram,
									this.bindTriangleBuffers.bind(this),
									this.verticeCount,
								),
								(function (t, e, i, r) {
									i(), t.useProgram(e);
									var n = t.getUniformLocation(e, 'uTime');
									t.uniform1f(n, performance.now());
									var a = t.getUniformLocation(e, 'uResolution');
									t.uniform2f(a, t.canvas.width, t.canvas.height),
										t.drawArrays(t.POINTS, 0, r);
								})(
									this.gl,
									this.particleShaderProgram,
									this.bindParticleBuffers.bind(this),
									this.particleCount,
								),
								this.stats.end());
						}
					},
				},
				{
					key: 'updateSettings',
					value: function (t) {
						var e = this.gl,
							i = G(this.settings, t);
						if (
							(t.force && (i = t),
							i.triangleSize &&
								((this.settings.triangleSize = i.triangleSize),
								this.generateVertices()),
							i.bleed && ((this.settings.bleed = i.bleed), this.generateVertices()),
							i.noise)
						) {
							var r = i.noise;
							(this.settings.noise = r), e.useProgram(this.triangleShaderProgram);
							var n = e.getUniformLocation(this.triangleShaderProgram, 'uNoise');
							e.uniform1f(n, this.settings.noise),
								r > this.settings.triangleSize && this.generateVertices();
						}
						if (
							(i.colors &&
								(Array.isArray(i.colors) &&
									(this.settings.colors = i.colors.map(function (t) {
										return q(t);
									})),
								this.calculateColors(),
								this.setBuffer(
									this.triangleShaderProgram,
									'aColor',
									this.triangleVerticeData.colors,
									4,
								)),
							i.pointVariationX)
						) {
							(this.settings.pointVariationX = i.pointVariationX),
								e.useProgram(this.triangleShaderProgram);
							var s = e.getUniformLocation(
								this.triangleShaderProgram,
								'uPointVariationX',
							);
							e.uniform1f(s, this.settings.pointVariationX);
						}
						if (i.pointVariationY) {
							(this.settings.pointVariationY = i.pointVariationY),
								e.useProgram(this.triangleShaderProgram);
							var o = e.getUniformLocation(
								this.triangleShaderProgram,
								'uPointVariationY',
							);
							e.uniform1f(o, this.settings.pointVariationY);
						}
						if (i.pointAnimationSpeed) {
							(this.settings.pointAnimationSpeed = i.pointAnimationSpeed),
								e.useProgram(this.triangleShaderProgram);
							var l = e.getUniformLocation(
								this.triangleShaderProgram,
								'uPointAnimationSpeed',
							);
							e.uniform1f(l, this.settings.pointAnimationSpeed);
						}
						if ((i.maxFps && (this.settings.maxFps = i.maxFps), i.animationOffset)) {
							(this.settings.animationOffset = i.animationOffset),
								e.useProgram(this.triangleShaderProgram);
							var h = e.getUniformLocation(
								this.triangleShaderProgram,
								'uAnimationOffset',
							);
							e.uniform1f(h, this.settings.animationOffset);
						}
						if (
							(i.image && (this.settings.image = i.image),
							i.imageOpacity && (this.settings.imageOpacity = i.imageOpacity),
							void 0 !== i.automaticResize &&
								((this.settings.automaticResize = i.automaticResize),
								i.automaticResize
									? window.addEventListener('resize', this.resize)
									: window.removeEventListener('resize', this.resize)),
							i.particleSettings)
						) {
							if (
								((i = i.particleSettings),
								(this.settings.particleSettings = a(
									{},
									this.settings.particleSettings,
									i,
								)),
								i.color)
							) {
								var c,
									f = e.getUniformLocation(this.particleShaderProgram, 'uColor'),
									u = j(
										null === (c = this.settings.particleSettings) ||
											void 0 === c
											? void 0
											: c.color,
									).map(function (t, e) {
										return (e + 1) % 4 != 0 ? t / 255 : t;
									});
								return void e.uniform3f(f, u[0], u[1], u[2]);
							}
							this.particulate();
						}
					},
				},
			]),
			l
		);
	})(W);
	(t.Thpace = tt), (t.ThpaceGL = st), Object.defineProperty(t, '__esModule', { value: !0 });
});
